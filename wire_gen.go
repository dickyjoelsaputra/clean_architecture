// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package clean_architecture

import (
	"clean_architecture/internal/config"
	"clean_architecture/internal/handler"
	"clean_architecture/internal/repository"
	"clean_architecture/internal/service"
	"clean_architecture/pkg/database"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// Wire injector
func InitializeApp() (*App, func(), error) {
	configConfig := config.Load()
	db, err := database.NewPostgresDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	repositories := repository.NewRepositories(db)
	services := service.NewServices(repositories)
	handlers := handler.NewHandlers(services)
	app := &App{
		DB:       db,
		Handlers: handlers,
		Config:   configConfig,
	}
	return app, func() {
	}, nil
}

// wire.go:

// Provider Sets
var ConfigSet = wire.NewSet(config.Load)

var DatabaseSet = wire.NewSet(database.NewPostgresDB)

var RepositorySet = wire.NewSet(repository.NewRepositories)

var ServiceSet = wire.NewSet(service.NewServices)

var HandlerSet = wire.NewSet(handler.NewHandlers)

// App structure
type App struct {
	DB       *gorm.DB
	Handlers *handler.Handlers
	Config   *config.Config
}

// Cleanup provider
func ProvideCleanup(db *gorm.DB) func() {
	return func() {
		sqlDB, err := db.DB()
		if err == nil {
			sqlDB.Close()
		}
	}
}
